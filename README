SAVARA SAM (Service Activity Monitoring) Prototype
==================================================

Aim: This repository has been setup to build a Service Activity Monitoring prototype architecture for use by Savara.

NOTE: This is just an experiment at this stage, and may therefore be deleted in the future if a more appropriate alternative is found, or the experiment is not successful.


Building:

Checkout the savara-sam project, e.g.

	git clone git@github.com:savara/savara-sam.git

and run the following command from the top level folder,

	mvn clean install

This will create an installer for JBoss AS7 in the distribution/jboss-as7/target folder, called sam.deployer.zip.


Running the Demo:

1) Download and unpack a JBoss AS7 distribution


2) Expand the sam.deployer.zip into the root folder of the AS7 distribution


3) Go to the bin folder and start a standalone version of AS7, e.g.

	(if AS 7.0.2)  

	./standalone.sh --server-config=standalone-preview.xml

	(if AS 7.1, with hornetq included by default)

	./standalone.sh


4) Start a browser and navigate to URL: http://localhost:8080/AQ_Monitor/

This will show a number of reports, including the 'purchasing response time' and 'purchasing conversation report' (showing conversation validation results), situations report highlighting issues, etc. Pressing the refresh button on the browser can be used to show the changes to the information, although the actual report information is only regenerated when an update occurs, not when the browser requests the page, demonstrating how notifications could also (eventually) be used to prompt the browser to refresh.


5) Generate activities by:

a) opening a command window in the $AS7/demo/sam_event_generator folder
b) running "mvn test"

This will display a menu of options. Select option 1, and 1 iteration. This will send activity events representing a 'successful' purchase transaction.

The other menu items represent different scenarios that may be enacted. Option 2 is relevant because it generates a transaction that is invalid in respect of the choreography - so causes conversation validation errors.

The final two options are used for generating a fast stream of events, for performance testing purposes, and the final option generates a random set of transactions from the first set of options (random but weighted in favour of the successful and normal failure scenarios).

As the transactions are being sent, with suitable delays, you can refresh the browser to see the effects.



NOTE:

1) Demonstrating 'situations'

A situation represents the occurs of an issue that needs to be dealt with by users. Currently a situation is created when a conversation validation occurs (i.e. option 2).

If you generate a number (2) transaction, then refresh the browser, you will see an entry appear in the 'Situations Report' section. The situation will initially have a status of 'New', and 'null' owner. If you wait around 20 seconds, and then second another (2) transaction, this will create a second situation, but you will also see the first situation has changed status to 'Accepted' with owner 'Me'.

This demostrates how application modules can manipulate the information contained in the active queries - in this case, the active query containing the 'situations'.


